context UATS!AttackTree{
	// AttackTree may only have 1 root, e.g. child without parent(s)
	// And this root should be the target of the root reference.
	constraint OneAndOnlyOneChildWithoutParents {
		check : parentlessNodes().size() = 1 and self.Root = parentlessNodes().first()
		message : "Multiple elements without parents."
	}
	
	constraint AllNodesReachable {
		check: self.Root.reachableNodes().select(n | not n.connector.isKindOf(UATS!FDEP)).size() == self.Nodes.select(n | not n.connector.isKindOf(UATS!FDEP)).size()
		message : "Not all nodes are reachable from the root."
	}
	
	// Every node should be part of the AttackTree
	constraint AllNodesContainedByAttackTree{
		check: self.Nodes.size() == UATS!Node.allInstances.size()
	}
	
	constraint NoCycles {
		check : self.Root.checkForCycles(Set {}) == true
		message : "Tree has cyclic structure"
	}
}

context UATS!Node {
	// Node must have Role
	constraint NodeMustHaveRole {
		check : self.role.size() == 1
		message : "Node " + self.ID + " does not have Role"
	}
	
	// Node must have Connector
	constraint NodeMustHaveConnector {
		check : self.connector.size() == 1
		message : "Node " + self.id + " does not have Connector"
	}
	
	constraint ParentsMustHaveChildren {
		check : self.parentsHaveChildren() == true
		message : "Node " + self.id + " has parent connectivity problem."
	}
}

context UATS!Edge{
	constraint SourceAndTargetNotEqual {
		check : self.Target <> self.Source 
	}
}

operation UATS!Node checkForCycles(parents : Set) : Boolean {
	if (not parents.add(self)) {
		return false;
	}

	for (child : UATS!Node in self.children) {
		if (not child.checkForCycles(parents)) {
			return false;
		}
	}
	parents.remove(self);
	return true;
}

operation UATS!Node parentsHaveChildren() : Boolean {
	for (parent : UATS!Node in self.parents) {
		if (not parent.children.contains(self)) {
			return false;
		}
	}
	return true;
}

// We allow RDEP gates without parents, as they only have a dummy output anyway.
operation parentlessNodes() : Sequence {
	return UATS!Node.allInstances.select(n|n.parents.size() == 0).select(n | not n.connector.isKindOf(UATS!RDEP)).select(n | not n.connector.isKindOf(UATS!FDEP));
}

operation UATS!Node reachableNodes() : Set {
	var ret : Set;
	ret.add(self);
	/* RDEP reachability means a non-trigger child is reachable, which means the trigger child is also reachable. */
	ret.add(self);
	if (self.connector.isKindOf(UATS!RDEP) or self.connector.isKindOf(UATS!FDEP)) {
		ret.add(self.children.first());
		ret.addAll(self.children.first().reachableNodes());
	} else if (self.connector == null) {
		/* If a BE is reachable, so is any RDEP it is a non-trigger child of. */
		for (parent : UATS!Node in self.parents) {
			if ((parent.connector.isKindOf(UATS!RDEP) or parent.connector.isKindOf(UATS!FDEP)) and self <> parent.children.get(0)) {
				ret.add(parent);
				ret.addAll(parent.reachableNodes());
			}
		}
	} else {
		/* Non-RDEP gate. */
		for (child : UATS!Node in self.children) {
			if (child.connector == null or not child.connector.isKindOf(UATS!RDEP)) {
				ret.add(child);
				ret.addAll(child.reachableNodes());
			}
		}
	}
	return ret;
}