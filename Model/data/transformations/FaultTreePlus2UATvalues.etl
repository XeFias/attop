pre
{
	var domains : Set;
  	var javaDate = new Native("java.util.Date");
	javaDate.toString().println("Starting FaultTree+2UAT structure transformation: ");
}

post
{
 	var javaDate = new Native("java.util.Date");
	javaDate.toString().println("Completed FaultTree+2UAT structure transformation: ");
}

@primary
rule main
	transform ftp : FaultTreePlus!t_XMLDataSet
	to ret : Set
{
	ret.addAll(FaultTreePlus!t_PrimaryEvents.allInstances().equivalent());
	ret.addAll(domains);
}

/* Big assumption here: We assume that every basic event has a failure model. */
@lazy
rule Event
	transform event : FaultTreePlus!t_PrimaryEvents
	to ret : UATV!Attribute
{
	guard : UATS!Node.allInstances.exists(n | n.id.equals(event.e_Id.text))
	
	var num = event.e_FailureModel.text.asInteger();
	ret.value = new UATS!RealValue();

	var input = FaultTreePlus!t_FailureModels.allInstances().get(num);
	if (input.c_ModelType.isEmpty()) {
		System.err.println("FailureModel " + input.e_Id + " has no model type, resulting model will be unusable.");
		return;
	}
	if (input.e_ModelType.text.equals("1") or input.e_ModelType.text.equals("3")) {
		ret.value.value = new Native("java.lang.Double")(input.e_FailureRate.text);
		if (input.e_ModelType.text.equals("3"))
			System.err.println("Warning: Converting dormant failure to normal failure in failure model " + input.e_Id.text);
	} else if (input.e_ModelType.text.equals("0")) {
		ret.value.value = new Native("java.lang.Double")(input.e_Unavailability.text);
	} else {
		System.err.println("Unknown failure model: " + input.e_ModelType.text + " in " + input.e_Id.text + ", resulting model may be unusable.");
	}
	ret.addToDomain(input.e_ModelType.text.asInteger());

	var node = UATS!Node.allInstances.select(n | n.id.equals(event.e_Id.text)).first();
	ret.node = node;
}

/* failureModel is the integer that is found in the FT+ XML */
operation UATV!Attribute addToDomain(failureModel)
{
	var domain;
	if (failureModel == 1 or failureModel == 3) {
		domain = UATV!Domain.allInstances.select(d | d.name.equals("lambda"));
		if (domain.size() == 0) {
			domain = new UATV!Domain();
			domain.name = "lambda";
			domain.valueType = new UATV!RealType();
			domain.purpose = new UATV!TimePurpose();
			domain.purpose.timeType = UATV!TimeType#EXPONENTIAL;
			domains.add(domain);
		} else {
			domain = domain.first();
		}
	} else if (failureModel == 0) {
		domain = UATV!Domain.allInstances.select(d | d.name.equals("ProbSucc"));
		if (domain.size() == 0) {
			domain = new UATV!Domain();
			domain.name = "ProbSucc";
			domain.valueType = new UATV!RealType();
			domain.purpose = new UATV!ProbabilityPurpose();
			domain.purpose.probType = UATV!ProbabilityType#COMPLETION;
			domains.add(domain);
		} else {
			domain = domain.first();
		}
	} else {
		System.err.println("Unknown domain for failure model " + failureModel);
		return; /* Attribute should already have complained. */
	}
	domain.attributes.add(self);
}
