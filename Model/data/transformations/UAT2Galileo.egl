[%

	var nodeParamMap : Map;
	var attackTree : UATS!AttackTree = UATS!AttackTree.allInstances().first();
	for(node in UATS!Node.allInstances()){
		nodeParamMap.put(node.id, new Map());
	}
	for(domain in UATV!Domain.allInstances()){
		for(attribute in domain.attributes){
			nodeParamMap.get(attribute.node.id).put(domain.name, attribute.value);
		}
	}


%]
toplevel "[%=attackTree.Root.id%]";
[%
	for(node in UATS!Node.allInstances()){
		out.print('"'+node.id+'"');
		if(node.connector <> null){
			if(node.connector.instanceOf(UATS!AND)){
				out.print(" and");
			} else if(node.connector.instanceOf(UATS!OR)){
				out.print(" or");
			} else if(node.connector.instanceOf(UATS!KofN)){
				out.print(" " + node.connector.Threshold + "of" + node.children.size());
			} else if(node.connector.instanceOf(UATS!PAND)){
				out.print(" pand");
			} else if(node.connector.instanceOf(UATS!SAND)){
				out.print(" sand");
			} else if(node.connector.instanceOf(UATS!SOR)){
				out.print(" sor");
			} else if(node.connector.instanceOf(UATS!Spare)){
				out.print(" wsp");
			}
		}
		for(child in node.children){
			out.print(" \"" + child.id + '"');
		}
		var params : Map = nodeParamMap.get(node.id);
		for(key in params.keySet()){
			out.print(" " + key + "=" + params.get(key).value);
		}
		out.println(";");
	}

%]