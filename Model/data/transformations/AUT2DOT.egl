[%
	import "IntermediateState.eol";

  	var javaDate = new Native("java.util.Date");
	javaDate.toString().println("Starting IMA2AUT generation: ");

	var IMA = IMA!InterimAutomaton.allInstances().first();
	var disruptions = IMA!Disruption.allInstances();
	var states = IMA!State.allInstances();
	//var AUT = buildMA();
	var AUT = buildMAText(true);

%]
digraph BCG {
graph [ dpi = 150 ];
center = TRUE;
node [shape = rect];
0 [peripheries = 2];
[%=AUT.third()%] 
}
[%
// Example:
//digraph BCG {
//size = "7, 10.5";
//center = TRUE;
//node [shape = circle];
//0 [peripheries = 2];
//0 -> 8 [label = "rate 3.1"];
//0 -> 5 [label = "rate 0.9"];
//1 -> 2 [label = "SUCCESS"];
//8 -> 2 [label = "FAIL"];
//}

operation buildMAText(printDot:Boolean) : Sequence(Integer, Integer, String) {

	var IMA = IMA!InterimAutomaton.allInstances().first();
	var disruptions = IMA!Disruption.allInstances();
	var states = IMA!State.allInstances();
	var totNrOfStates = 0;
	var totNrOfTransitions = 0;
	var probStatesId = states.size() - 1;
	if ( printDot ) { probStatesId = states.size() * 2 - 1; }
	var probabilityValues:OrderedSet(IMA!StringToDoubleMap)	= IMA.probabilities;
	var rateValues:OrderedSet(IMA!StringToDoubleMap)		= IMA.rates;

	var maStr:String = "";
	for (state in states) {
		if( state.outgoing.size() > 0 ){
			var beIDs = state.outgoing.collect( i|i.beId ).asSet();
			for ( beID in beIDs ) { /* handel one outgoing Bes at a time */
				if( beID <> "SUCCESS" and beID <> "FAIL" ){
					maStr = maStr.concat( toMarkoveTransitionString( printDot, state.toString(false), probStatesId++, beID, rateValues.get(beID) ) );
					totNrOfTransitions++;
					if ( printDot ) { // TODO: cleanup duplicate code
						maStr = maStr.concat( toDecisionTansactionString( printDot, probStatesId, probStatesId++, beID ) );
					} else {
						maStr = maStr.concat( toDecisionTansactionString( printDot, probStatesId, probStatesId, beID ) );
					}
					totNrOfTransitions++;
					// Processed successfull distuptions
					var succesfullDisruptions = state.outgoing.select( i | i.beId == beID and i.newStatus == IMA!StatusType#SUCCESS ); 
					var probabilityDividerSuccesfullDisruptions = succesfullDisruptions.size();
					for ( disruption in succesfullDisruptions ){
						maStr = maStr.concat( toProbabilityTransitionString( printDot, probStatesId, disruption.target.toString(false), beID, IMA!StatusType#SUCCESS, probabilityValues.get(beID) / probabilityDividerSuccesfullDisruptions) );
						totNrOfTransitions++;
					}
					// Processed failed distuptions
					var failedDisruptions = state.outgoing.select( i | i.beId == beID and i.newStatus == IMA!StatusType#FAILED ); 
					var probabilityDividerFailedDisruptions = failedDisruptions.size();
					for ( disruption in failedDisruptions ){
						maStr = maStr.concat( toProbabilityTransitionString( printDot, probStatesId, disruption.target.toString(false), beID, IMA!StatusType#FAILED, ((1 - probabilityValues.get(beID)) / probabilityDividerFailedDisruptions) ) );
						totNrOfTransitions++;
					}
				} else { /* end for !SUCCES and !FAIL */
					for ( disruptions in state.outgoing.select( i | i.beId == beID ) ){
						for ( disruption in disruptions ) {
							maStr = maStr.concat( toFinalTransitionString( printDot, state.toString(false), disruption.target.toString(false), beID ) );
							totNrOfTransitions++;
						}
					}
				}
			}
		}
	}
	return Sequence{ probStatesId + 1, totNrOfTransitions, maStr };
}

operation toMarkoveTransitionString(toDot:Boolean, stateID:String, nextProbabilityState:Integer, beID:String, value:Real) : String {
	if (toDot) {
		return ("\"" + stateID + "\"" + " -> " + nextProbabilityState + " [label = \"!" + beID + "\\n rate = " + value + "\", style=dashed]\n");
	} else {
		return ("("+ stateID + ", \"rate " + value + "\", " + nextProbabilityState + ")\n" );
	}
}

operation toDecisionTansactionString(toDot:Boolean, stateID:Integer, nextProbabilityState:Integer, beID:String) : String {
	if (toDot) {
		return ( (stateID + " -> " + nextProbabilityState + "\n") ).concat( nextProbabilityState + " [shape=point];\n" );
	} else {
		return ( "(" + stateID + ", \"" + beID + "\", 1)\n" );	/*TODO select target state */
	}
}

operation toProbabilityTransitionString(toDot:Boolean, dicisionStateID:Integer, nextState:String, beID:String, negation, value:Real) : String {
	var negationStr = "";
	if (negation == IMA!StatusType#FAILED) { negationStr = "Â¬";}
	if (toDot) {
		return (dicisionStateID + " -> " + "\"" + nextState + "\"" + " [label = \"" + negationStr + beID + "\\n prob = " + value.format("%.4s") + "\"]\n");
	} else {
		return ( "(" + dicisionStateID + ", \"prob " + value + "\", " + nextState + ")\n" );
	}
}

operation toFinalTransitionString(toDot:Boolean, stateID:String, nextState:String, beID:String) : String {
	if (toDot) {
		return ( ("\"" + stateID + "\"" + " -> " + "\"" + nextState + "\"" + " [label = \"" + beID + "\"]\n") );
	} else {
		return ( "(" + stateID + ", \"" + beID + "\", " + nextState + ")\n" );
	}
}

%]