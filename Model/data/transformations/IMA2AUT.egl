[%
  	var javaDate = new Native("java.util.Date");
	javaDate.toString().println("Starting IMA2AUT generation: ");
	var AUT = buildMA();
	var totNrOfStates = 0;
	var totNrOfTransitions = 0;

%]
des (0, [%=AUT.second()%], [%=AUT.first()%])
[%=AUT.third()%]
[%
// Example:
//des (0, 4, 4)
//(0, "rate 0.7", 3)
//(0, "rate 0.6", 2)
//(1, "FAIL", 3)
//(2, "rate 0.7", 1)


// This operation takes in an AT state and:
//	1.	generates a new state id for the probabilistic state.
//	0.	For id in outgoing transitions of the specific AT state. 
//	2.		then it prints and transition from the AT state to the probabilistic state 
//			with a 'rate' label and lambda related to this BES.
//	3.		then it prints and transition form the probabilistic state to state 1 with
//			BES id as the label!.
//	4.		Collects ids of outgoing transitions of the specific AT state. 
//	5.		For every id:
//				select transtions with d1.newStatus == SUCCESS
//				count the nbr of transitions
//				for every Success transition
//					print edge from AT state to related new state with label "prob <prob/nbr>" 
//				select transtions with d1.newStatus == FAILED
//				count the nbr of transitions
//				For every Failed transition
//					print edge from AT state to related new state with label "prob <(1-prob)/nbr>" 


// Retrieve the attribute value related to a node from a set of UATV!attributes.
operation getValue( attr:Set(UATV!attributes), BESID:String ) : Real {
	var attribute = attr.selectOne(x|x.node.id == BESID);
	return attribute.value.value;
}	
	
operation buildMA() : Sequence(Integer, Integer, String) {

	var IMA = IMA!InterimAutomaton.allInstances().first();
	var disruptions = IMA!Disruption.allInstances();
	var states = IMA!State.allInstances();
	var totNrOfStates = 0;
	var totNrOfTransitions = 0;
	var probStatesId = states.size() - 1;
	var probabilityValues:Set(UATV!attributes)	= UATV!Domain.allInstances().select(d|d.name == "prob").first().attributes;
	var rateValues:Set(UATV!attributes)			= UATV!Domain.allInstances().select(d|d.name == "lambda").first().attributes;

	var maStr:String = "";
	for (state in states) {
		if( state.outgoing.size() > 0 ){
			var beIDs = state.outgoing.collect( i|i.beId ).asSet();
			for ( beID in beIDs ) { /* handel one outgoing Bes at a time */
				if( beID <> "SUCCESS" and beID <> "FAIL" ){
					maStr = maStr.concat( "("+ state.id + ", \"rate " + getValue(rateValues, beID)+ "\", " + probStatesId++ + ")\n" );
					totNrOfTransitions++;
					/*TODO select target state */
					maStr = maStr.concat( "(" + probStatesId + ", \"" + beID + "\", 1)\n" );
					totNrOfTransitions++; 
					for ( disruptions in state.outgoing.select( i | i.beId == beID ) ){
						for ( disruption in disruptions.select( i | i.newStatus == IMA!StatusType#SUCCESS ) ) {
							maStr = maStr.concat( "(" + probStatesId + ", \"prob " + getValue(probabilityValues, beID) + "\", " + disruption.target.id + ")\n" );
							totNrOfTransitions++;
						}
						for ( disruption in disruptions.select( i | i.newStatus == IMA!StatusType#FAILED ) ) {
							maStr = maStr.concat( "(" + probStatesId + ", \"prob " + (1 - getValue(probabilityValues, beID)) + "\", " + disruption.target.id + ")\n" );
							totNrOfTransitions++;
						}
					}
				} else { /* end for !SUCCES and !FAIL */
					for ( disruptions in state.outgoing.select( i | i.beId == beID ) ){
						for ( disruption in disruptions ) {
							maStr = maStr.concat( "(" + state.id + ", \"" + beID + "\", " + disruption.target.id + ")\n" );
							totNrOfTransitions++;
						}
					}
				}
			}
		}
	}
	return Sequence{ probStatesId + 1, totNrOfTransitions, maStr };
}
%]