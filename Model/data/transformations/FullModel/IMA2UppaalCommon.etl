import "stdfunctions.etl";

//Wasn't chaching this kind of operations important for performances? I didn't measure much, but it seems to have no effect..
@cached
operation getAllAttributes() : Sequence {
	return UATV!Attribute.allInstances();
}

operation Uppaal!NSTA initializePredefinedTypes(){
	self.int = new Uppaal!PredefinedType();
	self.int.name = "int";
	self.int.type = Uppaal!BuiltInType#INT;
	self.chan  = new Uppaal!PredefinedType();
	self.chan.name = "chan";
	self.chan.type = Uppaal!BuiltInType#CHAN;
	self.bool  = new Uppaal!PredefinedType();
	self.bool.name = "bool";
	self.bool.type = Uppaal!BuiltInType#BOOL;
	self.void  = new Uppaal!PredefinedType();
	self.void.name = "void";
	self.void.type = Uppaal!BuiltInType#VOID;
	self.clock  = new Uppaal!PredefinedType();
	self.clock.name = "clock";
	self.clock.type = Uppaal!BuiltInType#CLOCK;
	self.double  = new Uppaal!DoubleType();
}

operation Uppaal!NTA initializeTemplate( states : Set(IMA!State)) : Map(String, Any) {
	
	self.systemDeclarations = new Uppaal!SystemDeclarations();
	self.systemDeclarations.system = new Uppaal!System();
	var iList = new Uppaal!InstantiationList();
	self.systemDeclarations.system.instantiationList.add(iList);
	
	
	var stateMap : Map(IMA!State,Uppaal!Location) = Map{};

	var tmpl : Uppaal!Template = new Uppaal!Template();
	tmpl.name = "Monolith";
	tmpl.declarations = new Uppaal!LocalDeclarations();
	
	tmpl.declareClock("localClock");

	// The clock
	var timeVar:Uppaal!Variable = tmpl.declareClock("x");
	var timeVarTotal:Uppaal!Variable = tmpl.declareClock("x_top");

	for (state : IMA!State in states) {
		var skip = false;
		var isInit = false;
		var commit = true;
		var	color = Uppaal!ColorKind#DEFAULT;
		var loc;
		var label = "";
		switch( state.name ) {
			case "rootState" : {
				label = "Init";
				isInit = true;
			}
			case "SUCCESS" : {
				label = "Completed";
				commit = false;
				color = Uppaal!ColorKind#GREEN;
			}
			case "FAIL" : {
				label = "FAIL";
				commit = false;
				color = Uppaal!ColorKind#RED;
			}
			case "Final" : {
				skip = true;
			}
			default : {
				state.id.println("id = ");
				state.id.toString().println("id string = ");
				label = "at_" + state.id.toString();
			}
		}
		if ( not skip ) {
			loc = tmpl.createLocation( label );
			loc.setColor( color );
			if ( isInit ) { tmpl.init = loc; }
			if ( commit ) { loc.makeCommitted(); }
			stateMap.put( state, loc );
		}
	}

	var decl = new Uppaal!TemplateDeclaration();
	decl.declaredTemplate = new Uppaal!RedefinedTemplate();
	decl.declaredTemplate.referredTemplate = tmpl;
	decl.declaredTemplate.name = "toplevel";
	
	self.template.add(tmpl);
	self.systemDeclarations.declaration.add(decl);
	self.systemDeclarations.system.instantiationList.at(0).template.add(decl.declaredTemplate);

	return Map{	"tmpl" = tmpl,
				"stateMap" = stateMap,
				"timeVar" = timeVar }; 
}

operation Uppaal!NTA createBErateTemplate(	nrOfrateBEprocessed:Integer,
											globalWithCost : Boolean,
											withCostRate : Boolean,
											addDeclToGlobal : Boolean ) : Uppaal!Template {
	// Creating Rate templete -----------------------------------	
	var rateTmpl : Uppaal!Template = new Uppaal!Template();
	if ( withCostRate ) { rateTmpl.name = "Rate"; } else { rateTmpl.name = "RateNoCostRate"; }
	rateTmpl.declarations = new Uppaal!LocalDeclarations();

	// Create template variable id
	var idParameterStr = "id";
	var idVar = createVariable(idParameterStr);
	var idDecl = createDataDeclaration(idVar);
	idDecl.typeDefinition.referredType = Uppaal!PredefinedType.allInstances().select(t | t.name = "int").first();
	var idParm = rateTmpl.addParameter(idDecl, false);
	// Create template variable lambda
	var lambdaParameterStr = "lambda";
	var lambdaVar = createVariable(lambdaParameterStr);
	var lambdaDecl = createDataDeclaration(lambdaVar);
	lambdaDecl.typeDefinition.referredType = Uppaal!DoubleType.allInstances().first();
	var lambdaParm = rateTmpl.addParameter(lambdaDecl, false);

	var costRateParameterStr = "costRate";
	var costRateVar = createVariable(costRateParameterStr);
	
	if ( withCostRate ) {
		// Create template variable costrate
		var costRateDecl = createDataDeclaration(costRateVar);
		costRateDecl.typeDefinition.referredType = Uppaal!PredefinedType.allInstances().select(t | t.name = "int").first();
		var costRateParm = rateTmpl.addParameter(costRateDecl, false);
	}
	// Create template variable costrate
	var fixedCostParameterStr = "fixedCost";
	var fixedCostVar = createVariable(fixedCostParameterStr);
	var fixedCostDecl = createDataDeclaration(fixedCostVar);
	fixedCostDecl.typeDefinition.referredType = Uppaal!PredefinedType.allInstances().select(t | t.name = "int").first();
	var fixedCostParm = rateTmpl.addParameter(fixedCostDecl, false);

	// Create locations		
	var rate_initLocation = rateTmpl.createLocation("Init");
	rateTmpl.init = rate_initLocation;
	var rate_rateLocation = rateTmpl.createExpLocation("Rate");
	var BElambdaVar = new Uppaal!LiteralExpression();
	BElambdaVar.text = "lambda";
	rate_rateLocation.exitRate = BElambdaVar;

	if ( globalWithCost and withCostRate ) {
		// cost accumulator
		rate_rateLocation.setInvariant( createVariable("cost'").simpleComparison(costRateVar, Uppaal!CompareOperator#EQUAL) );
	}

	var rate_doneLocation = rateTmpl.createLocation("Done");
	// Create edges		
	var rate_rateStartEdge = rateTmpl.createEdge(rate_initLocation, rate_rateLocation);
	if ( globalWithCost ) {
		// TODO: Add fixed cost in trasition toDelay 'cost = cost + 1'
		rate_rateStartEdge.addUpdate(
			createAssignmentExpr(
				createVariable("cost").createReferringExpression(),
				createSum(	createVariable("cost").createReferringExpression(),
							createLiteralExpression( "fixedCost" ) ) ) );
	}	

	var rate_rateDoneEdge = rateTmpl.createEdge(rate_rateLocation, rate_doneLocation);
	var rate_rateResetIfNotDoneEdge = rateTmpl.createEdge(rate_rateLocation, rate_initLocation);
	var rate_rateResetIfDoneEdge = rateTmpl.createEdge(rate_doneLocation, rate_initLocation);

	// Add rateStart synchronization
	var rateStartStr = "rateStart";
	var rateStartArray:Uppaal!Variable = createVariable(rateStartStr).makeArray(nrOfrateBEprocessed);
	var rateStartSignalDeclaration = createChannelDeclaration(rateStartArray).makeBroadcast();
	var rateStartVar = createVariable(rateStartStr).createReferringExpression().makeArrayExpression(idParameterStr);
	rate_rateStartEdge.setSync(rateStartVar, false);

	// Add rateComplete synchronization
	var rateCompleteStr = "rateComplete";
	var rateCompleteArray:Uppaal!Variable = createVariable(rateCompleteStr).makeArray(nrOfrateBEprocessed);
	var rateCompleteSignalDeclaration = createChannelDeclaration(rateCompleteArray).makeBroadcast();
	var rateCompleteVar = createVariable(rateCompleteStr).createReferringExpression().makeArrayExpression(idParameterStr);
	rate_rateDoneEdge.setSync(rateCompleteVar, true);


	// Add resetBEs synchronization to rate_rateResetIfDoneEdge
	var resetBEsStr = "resetBEs";
	var resetBEs:Uppaal!Variable = createVariable(resetBEsStr);
	var resetBEsSignalDeclaration = createChannelDeclaration(resetBEs).makeBroadcast();
	var resetBEsVar = createVariable(resetBEsStr).createReferringExpression();
	rate_rateResetIfDoneEdge.setSync(resetBEsVar, false);
	// Add resetBEs synchronization to rate_rateResetIfNotDoneEdge
	var resetBEs2Var = createVariable(resetBEsStr).createReferringExpression();
	rate_rateResetIfNotDoneEdge.setSync(resetBEs2Var, false);
	self.template.add(rateTmpl);

	if ( addDeclToGlobal ) {
		self.globalDeclarations.declaration.add(rateStartSignalDeclaration);
		self.globalDeclarations.declaration.add(rateCompleteSignalDeclaration);
		self.globalDeclarations.declaration.add(resetBEsSignalDeclaration);
	}
	
	return rateTmpl;
}

operation Uppaal!NTA addAllBErateProcesses( rateTemplate:Uppaal!Template, 
											rateWithoutCostRateTemplate:Uppaal!Template,
											globalWithCost : Boolean,
											id2Index: Map(String, Integer) ) {

	var rateDomain = UATV!Domain.allInstances().select(d|d.name == "lambda");
	var rateValues: Set(UATV!attributes) = Set{};
	if ( rateDomain.size() > 0 ) {
		rateValues = UATV!Domain.allInstances().select(d|d.name == "lambda").first().attributes;
	}

	for ( beID in id2Index.keySet() ) {
		var cost:Integer = 0 ;
		var costRate:Integer = 0 ;
		var rate = rateValues.selectOne(a|a.node.id == beID );
		
		var activationCost = getCost( beID, UATV!CostType#ON_ACTIVATION ).asInteger();
		if ( activationCost <> -1 ) { cost = activationCost; } else { cost = 0; }
		if ( globalWithCost ) { 		
			var activeCost = getCost( beID, UATV!CostType#WHILE_ACTIVE ).asInteger();
			if ( activeCost <> -1 ) { costRate = activeCost; }
		}
		
		if ( rate <> null ) {
			self.declareBErateProcess( rateTemplate, rateWithoutCostRateTemplate, "TestBE_" + beID, id2Index.get(beID), rate.value.value, costRate, cost );
		}
	}
}

operation Uppaal!NTA declareBErateProcess(	rateTemplate:Uppaal!Template,
											rateWithoutCostRateTemplate:Uppaal!Template, 
											name:String, 
											beId:Integer,
											lambda:Real,
											costrate:Integer,
											cost:Integer ) {

	//TODO: declaration for each BE which has a Rate state.
	var decl2 = new Uppaal!TemplateDeclaration();
	decl2.declaredTemplate = new Uppaal!RedefinedTemplate();
	if ( costrate > 0 ) {
		decl2.declaredTemplate.referredTemplate = rateTemplate;
	} else {
		decl2.declaredTemplate.referredTemplate = rateWithoutCostRateTemplate;
	}
	decl2.declaredTemplate.name = name; //"BE_1";
	var BEid = new Uppaal!LiteralExpression();
	BEid.text = beId.asString();
	decl2.argument.add( BEid );
	var BElambda = new Uppaal!LiteralExpression();
	BElambda.text = lambda.asString();
	decl2.argument.add( BElambda );
	if ( costrate > 0 ) {
		var BEcostRate = new Uppaal!LiteralExpression();
		BEcostRate.text = costrate.asString();
		decl2.argument.add( BEcostRate );
	}
	var BEcost = new Uppaal!LiteralExpression();
	BEcost.text = cost.asString();
	decl2.argument.add( BEcost );
	self.systemDeclarations.declaration.add(decl2);
	self.systemDeclarations.system.instantiationList.at(0).template.add(decl2.declaredTemplate);
}

