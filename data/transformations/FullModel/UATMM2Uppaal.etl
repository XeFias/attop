import "stdfunctions.etl";
import "ExponentialBE.etl";
import "ProbabilisticBE.etl";
import "TimeBoundedBE.etl";
import "votingGate.etl";
import "toplevel.etl";
import "SeqVotGate.etl";

pre {
	var idToSignalNum : Map = new Map();
	var idToGateSignalNum : Map = new Map();
	var nodeId2LeafId : Map;
	var ElementId2LeafId : Map;
  	var LeafId2ElementId : Map;
  	/*var id = 0;
  	for(n in UATS!Node.allInstances().select(n|n.children.size() == 0)) {
  		ElementId2LeafId.put(n.label, id);
  		LeafId2ElementId.put(id, n.label);
		id = id + 1;
	}*/
	
	var domain2type = initDomainType();
  	var domain2initValue = initDomainInitValue();
}

rule Base
	transform at : UATS!AttackTree
	to out : Uppaal!NSTA
	{
		var intId = 0;
		var leafId = 0;
		var gateId = 0;
		for (node : UATS!Node in at.Nodes) {
			idToSignalNum.put(node.id, intId);
			if (node.children.size() == 0) {
				ElementId2LeafId.put(node.id, intId);
  				LeafId2ElementId.put(intId, node.id); //!!! We can't use node.label here! There may be models where the label is not unique! However, I see that we also have a "node.id": can't we use that?
				nodeId2LeafId.put(node.id, leafId);
				leafId = leafId + 1;
			} else {
				idToGateSignalNum.put(node.id, gateId);
				gateId = gateId + 1;
			}
			intId = intId + 1;
		}

		var tmpVar = createVariable("complete").makeArray(intId);
		var completedSignalDeclaration = createChannelDeclaration(tmpVar).makeBroadcast();
		out.globalDeclarations = new Uppaal!GlobalDeclarations();
		out.globalDeclarations.declaration.add(completedSignalDeclaration);

		tmpVar = createVariable("activate").makeArray(intId);
		var activateSignalDeclaration = createChannelDeclaration(tmpVar).makeBroadcast();
		out.globalDeclarations.declaration.add(activateSignalDeclaration);

		tmpVar = createVariable("abort").makeArray(intId);
		var activateSignalDeclaration = createChannelDeclaration(tmpVar).makeBroadcast();
		out.globalDeclarations.declaration.add(activateSignalDeclaration);

		tmpVar = createVariable("dontcare").makeArray(gateId);
		var activateSignalDeclaration = createChannelDeclaration(tmpVar).makeBroadcast();
		out.globalDeclarations.declaration.add(activateSignalDeclaration);

		tmpVar = createVariable("cost");
		var totalCostDeclaration = createDataDeclaration(tmpVar);
		out.globalDeclarations.declaration.add(totalCostDeclaration);

		var domains : Sequence;
	  	var domains_stripped : Sequence;
	  	for(d in UATV!Domain.allInstances()) { 
			domains.add(d.name);
	  		var id_stripped = d.name.replaceAll("\\d","");
			//domain2metaDomain.put(id, id_stripped);
			if(domains_stripped.indexOf(id_stripped) == -1) {
				domains_stripped.add(id_stripped);
			}
	  	}
		
		//Add the difficulty domain (if it is included in the model)
		if ((domains_stripped.indexOf("DiffLMH") <> -1) or (domains_stripped.indexOf("DiffLMHE") <> -1 )) {
			var lowDifficulty = createVariable("L")
									.setInitialValue(0);
			var lowDiffDeclaration = createDataDeclaration(lowDifficulty).makeConst();
			out.globalDeclarations.declaration.add(lowDiffDeclaration);
			
			var mediumDifficulty = createVariable("M")
									.setInitialValue(1);
			var mediumDiffDeclaration = createDataDeclaration(mediumDifficulty).makeConst();
			out.globalDeclarations.declaration.add(mediumDiffDeclaration);
			
			var highDifficulty = createVariable("H")
									.setInitialValue(2);
			var highDiffDeclaration = createDataDeclaration(highDifficulty).makeConst();
			out.globalDeclarations.declaration.add(highDiffDeclaration);
			
			if (domains_stripped.indexOf("DiffLMHE") <> -1) {
				var extremeDifficulty = createVariable("E")
										.setInitialValue(3);
				var extremeDiffDeclaration = createDataDeclaration(extremeDifficulty).makeConst();
				out.globalDeclarations.declaration.add(extremeDiffDeclaration);
			}
		}
		
		//Declare the other domains, with respective initialization values
		for ( d in domains ) {
			var str_d = d.replaceAll("\\d","");
			if (not domain2type.containsKey(str_d)) {
				("Couldn't match domain ["+d+"]").println();
			} else {
				var resultDomainValue = createVariable("result_" + d)
												.setInitialValue(domain2initValue.get(str_d));
				var resultDomDeclaration = createDataDeclaration(resultDomainValue)
												.setTypeName(domain2type.get(str_d));
				out.globalDeclarations.declaration.add(resultDomDeclaration);
			}
		}
		
		
		for ( d in domains ) {
			var str_d = d.replaceAll("\\d","");
			if (not domain2type.containsKey(str_d)) {
				("Couldn't match domain \"" + str_d + "\"").println();
			}
			else if (d.startsWith("MinTime") or d.startsWith("lambda") or d.startsWith("MinCost")) {
				// ??? (this line was already empty)
				("No declaration needed for domain MinTime, lambda or MinCost: "+std_d).println();
			} else {
				("Declaring variables for domain \"" + str_d + "\" (for " + LeafId2ElementId.size() + " leaves)").println();
				var domainValues = createVariable(d).makeArray(LeafId2ElementId.size());
				var domValsDeclaration = createDataDeclaration(domainValues)
											.setTypeName(domain2type.get(str_d));
				var values : Sequence;
				
				for( key in LeafId2ElementId.keySet() ) {
					for ( att in getAllAttributes().select(a | a.eContainer.name.equals(d) and a.node.id == getATNode(LeafId2ElementId.get(key)).id) ) {
						if  (str_d.equals("ProbSucc")) {
							values.add((1000 * att.value.value.asReal()).floor());
					 	} else {
							values.add(att.value.value);
					 	}
					}
				}
				domainValues.setArrayInitialValues(values);
				out.globalDeclarations.declaration.add(domValsDeclaration);
			} 
		}
		
		
				
		var str_d : String;
		for ( d in domains ) {
			if (d.startsWith("DiffLMH")) {
				/*%]
	void handle[%=d %](int value) { 
		if ([%=d %][value] > result_[%=d %]) {
		 	result_[%=d %] = [%=d %][value]; 
		 }
	}
				
			[%*/
				var f : Uppaal!FunctionDeclaration = declareFunction("handle" + d);
				var idVar = createVariable("id");
				var idVarDecl = createDataDeclaration(idVar);
				f.`function`.addFunctionParameter(idVarDecl, false);
				var statements : Sequence;
				
				var difficultyArray = createVariable(d);
				var difficultyOfThisNode = difficultyArray.createReferringExpression().makeArrayExpression(idVar.createReferringExpression());
				var resultDifficulty = createVariable("result_" + d).createReferringExpression();
				var comparisonDifficulty = createComparison(difficultyOfThisNode, Uppaal!CompareOperator#GREATER, resultDifficulty);
				var resultDifficultyLHS = createVariable("result_" + d).createReferringExpression();
				var difficultyOfThisNodeRHS = difficultyArray.createReferringExpression().makeArrayExpression(idVar.createReferringExpression());
				var assignNewMaxDifficulty = createAssignment(resultDifficultyLHS, difficultyOfThisNodeRHS);
				var thenSequence : Sequence;
				thenSequence.add(assignNewMaxDifficulty);
				var ifStatement = createIfStatement(comparisonDifficulty, createStatementBlock(thenSequence));
				statements.add(ifStatement);
				
				var block : Uppaal!Block = createStatementBlock(statements);
				f.`function`.setBody(block);
				out.globalDeclarations.declaration.add(f);
				
			} else if  (d.startsWith("MinSkill")){
			/*%]
	void handle[%=d %](int value) { 
		result_[%=d %] = result_[%=d %] + [%=d %][value]; 
	}
			[%*/
			
				var f : Uppaal!FunctionDeclaration = declareFunction("handle" + d);
				var idVar = createVariable("id");
				var idVarDecl = createDataDeclaration(idVar);
				f.`function`.addFunctionParameter(idVarDecl, false);
				var statements : Sequence;
				
				var resultCostLHS = createVariable("result_" + d).createReferringExpression();
				var resultCostRHS = createVariable("result_" + d).createReferringExpression();
				var costArray = createVariable(d);
				var costOfThisNode = costArray.createReferringExpression().makeArrayExpression(idVar.createReferringExpression());
				var assignmentCost = createAssignment(resultCostLHS, createSum(resultCostRHS, costOfThisNode));
				statements.add(assignmentCost);
				
				var block : Uppaal!Block = createStatementBlock(statements);
				f.`function`.setBody(block);
				out.globalDeclarations.declaration.add(f);
				
			} else if  (d.startsWith("SatScenario") or d.startsWith("SatProp")){
			/*%]
	void handle[%=d %](int value) { 
		result_[%=d %] = result_[%=d %] and [%=d %][value]; 
	}
			
			[%*/
			} else if  (d.startsWith("ProbSucc")){
			/*%]
	void handle[%=d %](int value) { 
		result_[%=d %] = (result_[%=d %] * [%=d %][value])/1000; 
	}
			
			[%*/
			
				var f : Uppaal!FunctionDeclaration = declareFunction("handle" + d);
				var idVar = createVariable("id");
				var idVarDecl = createDataDeclaration(idVar);
				f.`function`.addFunctionParameter(idVarDecl, false);
				var statements : Sequence;
				
				var resultProbLHS = createVariable("result_" + d).createReferringExpression();
				var resultProbRHS = createVariable("result_" + d).createReferringExpression();
				var probArray = createVariable(d);
				var probOfThisNode = probArray.createReferringExpression().makeArrayExpression(idVar.createReferringExpression());
				var multiplication = createMultiplication(resultProbRHS, probOfThisNode);
				var oneThousand = createLiteralExpression("1000");
				var division = createDivision(multiplication, oneThousand);
				var assignmentCost = createAssignment(resultProbLHS, division);
				statements.add(assignmentCost);
				
				var block : Uppaal!Block = createStatementBlock(statements);
				f.`function`.setBody(block);
				out.globalDeclarations.declaration.add(f);
				
			}
		}
		
		out.systemDeclarations = new Uppaal!SystemDeclarations();
		out.systemDeclarations.system = new Uppaal!System();
		var iList = new Uppaal!InstantiationList();
		out.systemDeclarations.system.instantiationList.add(iList);

		for (node : UATS!Node in at.Nodes) {
			var converted = node.equivalent();
			if (converted <> null) {
				out.template.add(converted.get(0));
				out.systemDeclarations.declaration.add(converted.get(1));
				iList.template.add(converted.get(1).declaredTemplate);
			}
		}
		
		out.addTopLevel(at.Root);
	}

	
	// Domain Information
	operation initDomainType() : Map {
	
  		var domain2type : Map;
  		
	  	domain2type.put("DiffLMH","int");
	  	domain2type.put("DiffLMHE","int");
	  	domain2type.put("MinSkill","int");
	  	domain2type.put("PowerCons","double");
	  	domain2type.put("ProbSucc","int");
	  	domain2type.put("ReachPar","int");
	  	domain2type.put("ReachSeq","int");
	  	domain2type.put("SatOpp","bool");
	  	domain2type.put("SatProp","bool");
	  	domain2type.put("SatScenario","bool");
	  	
	  	return domain2type;
	}
	
	operation initDomainInitValue() : Map {
	
  		var domain2initValue : Map;
  		
	  	domain2initValue.put("DiffLMH","L");
	  	domain2initValue.put("DiffLMHE","L");
	  	domain2initValue.put("MinSkill",0);
	  	domain2initValue.put("PowerCons",0.0);
	  	domain2initValue.put("ProbSucc",1000);
	  	domain2initValue.put("ReachPar",0);
	  	domain2initValue.put("ReachSeq",0);
	  	domain2initValue.put("SatOpp","true");
	  	domain2initValue.put("SatProp","true");
	  	domain2initValue.put("SatScenario","true");
	  	
	  	return domain2initValue;
	}
	
	//Wasn't chaching this kind of operations important for performances? I didn't measure much, but it seems to have no effect..
	@cached
	operation getAllAttributes() : Sequence {
		return UATV!Attribute.allInstances();
	}
	
	@cached
	operation getAllLeaves() : Sequence {
		return UATS!Node.allInstances.select(n|n.children.size() == 0);
	}
	
	// Returns an ATNode, based on its label
	/*operation getATNode(target : String) : UATS!Node {
		var nodes = getAllLeaves();
		for(node in nodes) {
			if(target.equals(node.label)) return node;
		}
		return null;
	}*/
	
	operation getATNode(targetId : String) : UATS!Node {
		var nodes = getAllLeaves();
		for (node in nodes) {
			if (targetId.equals(node.id)) return node;
		}
		return null;
	}