pre {

  	var javaDate = new Native("java.util.Date");
  	javaDate.toString().println("Starting ATA2UAT transformation: ");
  	var id : Integer = 0;
  	
}

post {
 	var javaDate = new Native("java.util.Date");
  	javaDate.toString().println("Completed ATA2UAT transformation: ");
}

rule ATATree2UATTree
	transform ad : ATA!t_adtree
	to domains : Set {
	
	var domain1 = new UATV!Domain();
	domain1.name = "DiffLMHE";
	
	var domain2 = new UATV!Domain();
	domain2.name = "MinCost";
	domain2.purpose = new UATV!CostPurpose;
	domain2.purpose.costType = UATV!CostType#ON_ACTIVATION;
	domain2.valueType = new UATV!RealType;
	
	var domain3 = new UATV!Domain();
	domain3.name = "ProbSucc";
	domain3.valueType = new UATV!JavaType;
	domain3.valueType = new UATV!RealType;
	
	var domain4 = new UATV!Domain();
	domain4.name = "MinTimeSeq";
	domain4.purpose = new UATV!TimePurpose;
	domain4.purpose.timeType = UATV!TimeType#MINIMUM;
	domain4.valueType = new UATV!RealType;
	
	domains.add(domain1);
	domains.add(domain2);
	domains.add(domain3);
	domains.add(domain4);
	
	ad.e_node.recursiveXMLTeardown(domains);
}

// Recursive XML Teardown operation. Called on XML node and will call method on all child nodes
// Creates an ATNode, sets its parameters and sets parent/child relation to child ATNodes.
operation ATA!t_node recursiveXMLTeardown(domains : Set) {
	var children = self.c_node;
	var parameters = self.c_parameter;
	
	var nodeID = id.asString();
	id = id + 1;
	
	if (children.size()>0) {
		// If node has any childeren, call method recursively and add references to results.
		for (c in children) {
			c.recursiveXMLTeardown(domains);
	 	}
	} else {
		// If there are not any childeren, there can be paramters. Add
		for(p in parameters){
			var param = new UATV!Attribute();
			var domain = p.findDomain(domains);
			var node = UATS!Node.allInstances().select(a | a.id = nodeID).first();
			domain.attributes.add(param);
			param.node = node;
			if (domain.valueType.isKindOf(UATV!RealType)) {
				param.value = new UATV!RealValue();
				param.value.value = new Native("java.lang.Double")(p.findValue().asString());
			} else {
				param.value = new UATV!JavaObjectValue();
				param.value.value = p.findValue();
			}
		}
	}
}

operation ATA!t_parameter findDomain(domains : Set){

	if (self.a_name.equals("cost")){
		return domains.select(d|d.name=="MinCost").first();
	} else 
	if (self.a_name.equals("likelihood")){
		return domains.select(d|d.name=="ProbSucc").first();
	} else
	if (self.a_name.equals("difficulty")){
		return domains.select(d|d.name=="DiffLMHE").first();
	} else
	if (self.a_name.equals("time")){
		return domains.select(d|d.name=="MinTimeSeq").first();
	} else {
		throw "Error";
	}

}

operation ATA!t_parameter findValue(){

	if (self.a_name.equals("cost")){
		return self.text;
	} else if (self.a_name.equals("likelihood")){
			if(self.text.equals("L")) { return 0.25; }
		else if(self.text.equals("M")) { return 0.5; }
		else if(self.text.equals("H")) { return 0.75; }
		else if(self.text.equals("V")) { return 1.0; }
		else { throw "Error"; }
	} else
	if (self.a_name.equals("difficulty")){
		if(self.text.equals("V")) { return "E"; }
		else { return self.text; }
	} else
	if (self.a_name.equals("time")){
			 if(self.text.equals("HR")) { return 1; }
		else if(self.text.equals("D")) { return 24; }
		else if(self.text.equals("MT")) { return 720; }
		else { throw "Error"; }
	} else {
		throw "Error";
	}
}